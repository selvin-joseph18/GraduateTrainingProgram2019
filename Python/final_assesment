1)class Format_validator(Exception):
    def __init__(self):
        pass

    def __str__(self):
        return (repr(self.value))


#file_name='jpg'
try:
    #formats=file_name.split('.')
    with open('jpg.txt', 'w') as f1:
        name =f1.name
        if 'jpg' in name or 'png' in name or '.jpeg' in name:
            raise Format_validator

except Format_validator as fv:
    print("unsupported file format")

else:
    print("successfully imported file")
    
    
2)class Account:

    def __init__(self,name,balance):

        self.name = name
        self.balance = balance
        print(self.name)



    def withdraw(self,amount):
        if amount > self.balance:
            print("insufficent funds")
        else:
            self.balance = self.balance - amount
            print(self.balance)

    def account_balance(self):
        print(self.balance)
        print("balance amount is :{} ".format(self.balance))

    def __repr__(self):
        return 'user account details: {} {}'.format(self.name,self.balance)


    def deposit(self,amount):
        self.balance +=amount


user1 = Account('selvin',5000)
user2 = Account('JOSEPH',10000)
user1.withdraw(200)
user1.deposit(200)
user1.account_balance()
#print(user1.balance)
#user2 = Account()


3)import xlsxwriter
import mysql.connector
with open('student_id','r') as f1:
    contents = f1.read()
    student_id_list =contents.split('.')
mydb = mysql.connector.connect(host='localhost',user='root',passwd='root',database='sample')
mycursor = mydb.cursor()
mycursor.execute("select * from student where student_id in student_id_list")
result = mycursor.fetchall()

for row in result:
   f = open(row[0]+'.xlsx','w+')

4)import re

with open('address','r') as f1:
    contents=f1.read()
    pattern  = re.compile(r'(\d{1,3}\.)+(\d{1,3}\.)+(\d{1,3}\.)+(\d{1,3})+')

matches = re.finditer(pattern,contents)

for match in matches:
    print(match.group())
    
    5)words1 = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', \
            6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine', 10: 'Ten', \
            11: 'Eleven', 12: 'Twelve', 13: 'Thirteen', 14: 'Fourteen', \
            15: 'Fifteen', 16: 'Sixteen', 17: 'Seventeen', 18: 'Eighteen', 19: 'Nineteen'}
words2 = ['Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']

def number(Number):
    if 1 <= Number < 19:
        return words1[Number]
    elif 20 <= Number <= 99:
        tens, below_ten = divmod(Number, 10)
        return words2[tens - 2] + words1[below_ten]
    else:
        print("Number out of range")
res = number(99)
print(res)

6)# range = int(input("enter the range: "))
#
# with open('ex6','r') as f1:
#     contents = f1.read()
#     f1.seek(range)
#     print(f1.readline())

7)open_list = ["[", "{", "("]
close_list = ["]", "}", ")"]

def validate(myStr):
    result=[]
    for i in myStr:
        if i in open_list:
            result.append(i)
        elif i in close_list:
            pos = close_list.index(i)
            if ((len(result) > 0) and
                    (open_list[pos] == result[len(result) - 1])):
                result.pop()
            else:
                return "Unbalanced"
    if len(result) == 0:
        return "Balanced"


string = "{[]{()}}"
print(validate(string))

    
